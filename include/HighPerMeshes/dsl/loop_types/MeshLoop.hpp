// Copyright (c) 2017-2020
//
// Distributed under the MIT Software License
// (See accompanying file LICENSE)

#ifndef DSL_LOOPTYPES_MESHLOOP_HPP
#define DSL_LOOPTYPES_MESHLOOP_HPP

#include <functional>

#include <HighPerMeshes/dsl/data_access/LocalView.hpp>
#include <HighPerMeshes/dsl/loop_types/loop_implementations/DefaultLoopImplementations.hpp>
#include <HighPerMeshes/dsl/loop_types/loop_implementations/OpenMPLoops.hpp>
#include <HighPerMeshes/dsl/meshes/Range.hpp>

namespace HPM
{
//! \brief MeshLoop combines all information necessary to execute a kernel on a set of mesh entities.
//!
//! This type aggregates the necessary access list, the loop implementation and the actual kernel that is necessary to
//! execute a kernel over a certain region of the mesh while also accessing access_definitions.
//!
template <typename MeshT_, std::size_t Dimension, typename LoopT_, typename LoopBody, typename... AccessDefinition>
struct MeshLoop
{
    using AccessDefinitions = std::tuple<AccessDefinition...>;
    using MeshT = MeshT_;
    using LoopT = LoopT_;

    MeshLoop(const mesh::Range<Dimension, MeshT> &entity_range, AccessDefinitions access_definitions, LoopT loop, LoopBody loop_body)
        : entity_range(entity_range), access_definitions(access_definitions), loop(loop), loop_body(loop_body){};

    //! A reference to the range over entities that this loop iterates over.
    //! \see
    //! HPM::mesh::Range
    const mesh::Range<Dimension, MeshT> &entity_range;

    //! A tuple of access definitions
    //! \see
    //! HPM::AccessDefinitionDefinition
    AccessDefinitions access_definitions;

    //! This specifies which region of the mesh to iterate over
    //! \see
    //! HPM::LoopImplementation
    const LoopT loop;

    //! A kernel that is supposed to be executed for each entity given by loop
    //! The kernel itself must have the following signature:
    //! void (const EntityType&, TimeStepType, LocalViewType)
    //! where entityType is the type of entities in `entity_range`
    //! TimeStepType is the type of time-step used and normally specified by the dispatcher
    //! and LocalViewType is the type generated by the local view given `access_definitions`.
    //!
    //! Example:
    //! [](const auto& entity, auto time_step, auto lvs) { /* ... */ }
    //!
    //! \see
    //! HPM::LocalView
    const LoopBody loop_body;
};

//! ForEachEntity generates a MeshLoop that is intended to iterate over all entities of a givem dimension `Dimension`.
//!
//! \see
//! HPM::MeshLoop
template <std::size_t Dimension, typename MeshT, typename LoopBody, typename... AccessDefinition, typename LoopImplementation = HPM::internal::ForEachEntity<Dimension>>
[[nodiscard]] auto ForEachEntity(const mesh::Range<Dimension, MeshT> &entity_range, std::tuple<AccessDefinition...> access_definitions, LoopBody f, LoopImplementation loop_implementation = HPM::internal::ForEachEntity<Dimension>{})
{
    return MeshLoop{entity_range, access_definitions, loop_implementation, [f](const auto &entity, const auto &iter, auto &localVectors) { f(entity, iter, localVectors); }};
}

//! ForEachincidence generates a MeshLoop that is intended to iterate over all entities of a given dimension
//! `Dimension` and all their children of another given dimension `SubDimension`.
//!
//! \see
//! HPM::MeshLoop
template <std::size_t SubDimension, std::size_t Dimension, typename MeshT, typename LoopBody, typename... AccessDefinition, typename LoopImplementation = HPM::internal::ForEachIncidence<Dimension, SubDimension>>
[[nodiscard]] auto ForEachIncidence(const mesh::Range<Dimension, MeshT> &entity_range, std::tuple<AccessDefinition...> access_definitions, LoopBody f, LoopImplementation loop_implementation = HPM::internal::ForEachIncidence<Dimension, SubDimension>{})
{
    return MeshLoop{entity_range, access_definitions, loop_implementation,
                    [f](const auto &face, const auto &iter, auto &localVectors) {
                        const auto &entity = face.GetTopology().GetContainingCell();
                        f(entity, face, iter, localVectors);
                    }

    };
}
} // namespace HPM

#endif